{"ast":null,"code":"var _jsxFileName = \"/Users/krambi/Desktop/chillfinall/src/context/WalletContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Loading up the essentials for our wallet magic ‚ú®\nimport React, { createContext, useContext, useState } from 'react';\nimport * as anchor from '@coral-xyz/anchor';\nimport { Connection, PublicKey, clusterApiUrl, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { IDL } from '../constants/idl';\nimport { CONFIG } from '../config/constants';\n\n// Creating the secret sauce that makes our wallet work everywhere üåç\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext();\n\n// The hook that lets us tap into the wallet goodness ü™ù\nexport function useWallet() {\n  _s();\n  return useContext(WalletContext);\n}\n\n// The big daddy component that shares wallet data with everyone üéØ\n_s(useWallet, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function WalletProvider({\n  children\n}) {\n  _s2();\n  // Setting up our wallet state - gotta track those gainz üìà\n  const [publicKey, setPublicKey] = useState(null);\n  const [balance, setBalance] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Establishing our connection to the Solana mothership üöÄ\n  const connection = new Connection(CONFIG.RPC_ENDPOINT || clusterApiUrl(CONFIG.NETWORK), CONFIG.COMMITMENT);\n  // Getting our program's address ready for action üè†\n  const programId = new PublicKey(CONFIG.PROGRAM_ID);\n\n  // The function that gets us connected to the promised land üåà\n  const connectWallet = async () => {\n    try {\n      // Making sure Phantom is in the house üëª\n      if (!window.solana || !window.solana.isPhantom) {\n        alert('Phantom wallet is not installed!');\n        window.open('https://phantom.app/', '_blank');\n        return;\n      }\n\n      // Time to link up with Phantom üîó\n      const resp = await window.solana.connect();\n      setPublicKey(resp.publicKey);\n      await updateWalletInfo(resp.publicKey);\n    } catch (err) {\n      // Something went wrong in the matrix üòÖ\n      console.error('Error connecting wallet:', err);\n      alert('Failed to connect wallet');\n    }\n  };\n\n  // When it's time to say goodbye (for now) üëã\n  const disconnectWallet = async () => {\n    try {\n      await window.solana.disconnect();\n      setPublicKey(null);\n      setBalance(null);\n    } catch (err) {\n      console.error('Error disconnecting wallet:', err);\n    }\n  };\n\n  // Checking how much SOL we're working with üí∞\n  const updateWalletInfo = async pubKey => {\n    try {\n      const balance = await connection.getBalance(pubKey);\n      setBalance((balance / LAMPORTS_PER_SOL).toFixed(4));\n    } catch (err) {\n      console.error('Error updating wallet info:', err);\n    }\n  };\n\n  // Packaging up all our wallet goodies to share üéÅ\n  const value = {\n    publicKey,\n    balance,\n    isLoading,\n    setIsLoading,\n    connectWallet,\n    disconnectWallet,\n    connection,\n    programId\n  };\n\n  // Spreading the wallet love to all our components üíù\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s2(WalletProvider, \"ER9rwBd+yKHDgWGqgobfftQ2eBo=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","anchor","Connection","PublicKey","clusterApiUrl","LAMPORTS_PER_SOL","IDL","CONFIG","jsxDEV","_jsxDEV","WalletContext","useWallet","_s","WalletProvider","children","_s2","publicKey","setPublicKey","balance","setBalance","isLoading","setIsLoading","connection","RPC_ENDPOINT","NETWORK","COMMITMENT","programId","PROGRAM_ID","connectWallet","window","solana","isPhantom","alert","open","resp","connect","updateWalletInfo","err","console","error","disconnectWallet","disconnect","pubKey","getBalance","toFixed","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/krambi/Desktop/chillfinall/src/context/WalletContext.js"],"sourcesContent":["// Loading up the essentials for our wallet magic ‚ú®\r\nimport React, { createContext, useContext, useState } from 'react';\r\nimport * as anchor from '@coral-xyz/anchor';\r\nimport { Connection, PublicKey, clusterApiUrl, LAMPORTS_PER_SOL } from '@solana/web3.js';\r\nimport { IDL } from '../constants/idl';\r\nimport { CONFIG } from '../config/constants';\r\n\r\n// Creating the secret sauce that makes our wallet work everywhere üåç\r\nconst WalletContext = createContext();\r\n\r\n// The hook that lets us tap into the wallet goodness ü™ù\r\nexport function useWallet() {\r\n  return useContext(WalletContext);\r\n}\r\n\r\n// The big daddy component that shares wallet data with everyone üéØ\r\nexport function WalletProvider({ children }) {\r\n  // Setting up our wallet state - gotta track those gainz üìà\r\n  const [publicKey, setPublicKey] = useState(null);\r\n  const [balance, setBalance] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Establishing our connection to the Solana mothership üöÄ\r\n  const connection = new Connection(\r\n    CONFIG.RPC_ENDPOINT || clusterApiUrl(CONFIG.NETWORK), \r\n    CONFIG.COMMITMENT\r\n  );\r\n  // Getting our program's address ready for action üè†\r\n  const programId = new PublicKey(CONFIG.PROGRAM_ID);\r\n\r\n  // The function that gets us connected to the promised land üåà\r\n  const connectWallet = async () => {\r\n    try {\r\n      // Making sure Phantom is in the house üëª\r\n      if (!window.solana || !window.solana.isPhantom) {\r\n        alert('Phantom wallet is not installed!');\r\n        window.open('https://phantom.app/', '_blank');\r\n        return;\r\n      }\r\n\r\n      // Time to link up with Phantom üîó\r\n      const resp = await window.solana.connect();\r\n      setPublicKey(resp.publicKey);\r\n      await updateWalletInfo(resp.publicKey);\r\n    } catch (err) {\r\n      // Something went wrong in the matrix üòÖ\r\n      console.error('Error connecting wallet:', err);\r\n      alert('Failed to connect wallet');\r\n    }\r\n  };\r\n\r\n  // When it's time to say goodbye (for now) üëã\r\n  const disconnectWallet = async () => {\r\n    try {\r\n      await window.solana.disconnect();\r\n      setPublicKey(null);\r\n      setBalance(null);\r\n    } catch (err) {\r\n      console.error('Error disconnecting wallet:', err);\r\n    }\r\n  };\r\n\r\n  // Checking how much SOL we're working with üí∞\r\n  const updateWalletInfo = async (pubKey) => {\r\n    try {\r\n      const balance = await connection.getBalance(pubKey);\r\n      setBalance((balance / LAMPORTS_PER_SOL).toFixed(4));\r\n    } catch (err) {\r\n      console.error('Error updating wallet info:', err);\r\n    }\r\n  };\r\n\r\n  // Packaging up all our wallet goodies to share üéÅ\r\n  const value = {\r\n    publicKey,\r\n    balance,\r\n    isLoading,\r\n    setIsLoading,\r\n    connectWallet,\r\n    disconnectWallet,\r\n    connection,\r\n    programId\r\n  };\r\n\r\n  // Spreading the wallet love to all our components üíù\r\n  return (\r\n    <WalletContext.Provider value={value}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n} "],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,OAAO,KAAKC,MAAM,MAAM,mBAAmB;AAC3C,SAASC,UAAU,EAAEC,SAAS,EAAEC,aAAa,EAAEC,gBAAgB,QAAQ,iBAAiB;AACxF,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,MAAM,QAAQ,qBAAqB;;AAE5C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,gBAAGZ,aAAa,CAAC,CAAC;;AAErC;AACA,OAAO,SAASa,SAASA,CAAA,EAAG;EAAAC,EAAA;EAC1B,OAAOb,UAAU,CAACW,aAAa,CAAC;AAClC;;AAEA;AAAAE,EAAA,CAJgBD,SAAS;AAKzB,OAAO,SAASE,cAAcA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAC3C;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMsB,UAAU,GAAG,IAAIpB,UAAU,CAC/BK,MAAM,CAACgB,YAAY,IAAInB,aAAa,CAACG,MAAM,CAACiB,OAAO,CAAC,EACpDjB,MAAM,CAACkB,UACT,CAAC;EACD;EACA,MAAMC,SAAS,GAAG,IAAIvB,SAAS,CAACI,MAAM,CAACoB,UAAU,CAAC;;EAElD;EACA,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF;MACA,IAAI,CAACC,MAAM,CAACC,MAAM,IAAI,CAACD,MAAM,CAACC,MAAM,CAACC,SAAS,EAAE;QAC9CC,KAAK,CAAC,kCAAkC,CAAC;QACzCH,MAAM,CAACI,IAAI,CAAC,sBAAsB,EAAE,QAAQ,CAAC;QAC7C;MACF;;MAEA;MACA,MAAMC,IAAI,GAAG,MAAML,MAAM,CAACC,MAAM,CAACK,OAAO,CAAC,CAAC;MAC1ClB,YAAY,CAACiB,IAAI,CAAClB,SAAS,CAAC;MAC5B,MAAMoB,gBAAgB,CAACF,IAAI,CAAClB,SAAS,CAAC;IACxC,CAAC,CAAC,OAAOqB,GAAG,EAAE;MACZ;MACAC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;MAC9CL,KAAK,CAAC,0BAA0B,CAAC;IACnC;EACF,CAAC;;EAED;EACA,MAAMQ,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMX,MAAM,CAACC,MAAM,CAACW,UAAU,CAAC,CAAC;MAChCxB,YAAY,CAAC,IAAI,CAAC;MAClBE,UAAU,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOkB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAMD,gBAAgB,GAAG,MAAOM,MAAM,IAAK;IACzC,IAAI;MACF,MAAMxB,OAAO,GAAG,MAAMI,UAAU,CAACqB,UAAU,CAACD,MAAM,CAAC;MACnDvB,UAAU,CAAC,CAACD,OAAO,GAAGb,gBAAgB,EAAEuC,OAAO,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,OAAOP,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAMQ,KAAK,GAAG;IACZ7B,SAAS;IACTE,OAAO;IACPE,SAAS;IACTC,YAAY;IACZO,aAAa;IACbY,gBAAgB;IAChBlB,UAAU;IACVI;EACF,CAAC;;EAED;EACA,oBACEjB,OAAA,CAACC,aAAa,CAACoC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA/B,QAAA,EAClCA;EAAQ;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B;AAACnC,GAAA,CA1EeF,cAAc;AAAAsC,EAAA,GAAdtC,cAAc;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}